from embedPipeline import embedAfterTransform
from giggle import giggleBenchmark

experiments = [
    {
        "name": "all-chunk",
        "k": 300,
        "padLength": 100,
        "querySwellFactor": 1,
        "queryChunkAmnt": 3,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 3,
        "queryTranslation": 0
    },
    {
        "name": "all-thirds",
        "k": 300,
        "padLength": 100,
        "querySwellFactor": 3,
        "queryChunkAmnt": 3,
        "sampleSwellFactor": 3,
        "sampleChunkAmnt": 3,
        "queryTranslation": 0
    },
    {
        "name": "query-chunk-highk",
        "k": 300,
        "padLength": 100,
        "querySwellFactor": 1,
        "queryChunkAmnt": 3,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 0
    },
    {
        "name": "query-chunk",
        "k": 100,
        "padLength": 100,
        "querySwellFactor": 1,
        "queryChunkAmnt": 3,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 0
    },
    {
        "name": "query-shrink-light",
        "k": 90,
        "padLength": 100,
        "querySwellFactor": 0.9,
        "queryChunkAmnt": 1,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 0
    },
    {
        "name": "query-swell-light",
        "k": 110,
        "padLength": 100,
        "querySwellFactor": 1.1,
        "queryChunkAmnt": 1,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 0
    },
    {
        "name": "query-swell",
        "k": 200,
        "padLength": 100,
        "querySwellFactor": 2,
        "queryChunkAmnt": 1,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 0
    },
    {
        "name": "query-thirds",
        "k": 100,
        "padLength": 100,
        "querySwellFactor": 3,
        "queryChunkAmnt": 3,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 0
    },
    {
        "name": "straight-highpad",
        "k": 100,
        "padLength": 300,
        "querySwellFactor": 1,
        "queryChunkAmnt": 1,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 0
    },
    {
        "name": "straight",
        "k": 100,
        "padLength": 100,
        "querySwellFactor": 1,
        "queryChunkAmnt": 1,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 0
    },
    {
        "name": "translate",
        "k": 100,
        "padLength": 100,
        "querySwellFactor": 1,
        "queryChunkAmnt": 1,
        "sampleSwellFactor": 1,
        "sampleChunkAmnt": 1,
        "queryTranslation": 10
    }
]

for exp in experiments:
    # TODO: repeatedly passing these parameters is
    #  cumbersome: consolidate information into
    #  a serialized dataset(s)?
    expName = exp['name']
    k = exp['k']
    padLength = exp['padLength']
    querySwellFactor = exp['querySwellFactor']
    queryChunkAmnt = exp['queryChunkAmnt']
    sampleSwellFactor = exp['sampleSwellFactor']
    sampleChunkAmnt = exp['sampleChunkAmnt']
    queryTranslation = exp['queryTranslation']

    dataDir = config["dataDir"]

    rule:
        name:
            # Note that this is NOT a wildcard
            f"embedsAfterTransform_{expName}"
        input:
            queryIntervals = f"{dataDir}/giggleBench/query.bed",
            sampleIntervals = f"{dataDir}/giggleBench/sample.bed"
        output:
            queryEmbeds = f"{dataDir}/giggleBench/embeds/{expName}/query.npy",
            sampleEmbeds = f"{dataDir}/giggleBench/embeds/{expName}/sample.npy",
            infoFile = f"{dataDir}/giggleBench/embeds/{expName}/info.md"
        run:
            embedAfterTransform(
                input.queryIntervals,
                input.sampleIntervals,
                output.queryEmbeds,
                output.sampleEmbeds,
                output.infoFile,
                expName,
                k,
                padLength,
                querySwellFactor,
                queryChunkAmnt,
                sampleSwellFactor,
                sampleChunkAmnt,
                queryTranslation
            )

    rule:
        name:
            f"giggleBenchmark_{expName}"
        input:
            queryIntervals = f"{dataDir}/giggleBench/query.bed",
            sampleIntervals = f"{dataDir}/giggleBench/sample.bed",
            queryEmbeds = f"{dataDir}/giggleBench/embeds/{expName}/query.npy",
            sampleEmbeds = f"{dataDir}/giggleBench/embeds/{expName}/sample.npy",
            legacyResults = f"{dataDir}/giggleBench/gresults.bed"
        output:
            overlapPlot = f"{config.experimentsDir}/giggleBench/{expName}/recallByOverlap.png",
            geOverlapPlot = f"{config.experimentsDir}/giggleBench/{expName}/recallByGEOverlap.png"
        run:
            giggleBenchmark(
                input.queryIntervals,
                input.sampleIntervals,
                input.queryEmbeds,
                input.sampleEmbeds,
                input.legacyResults,
                output.overlapPlot,
                output.geOverlapPlot,
                k,
                querySwellFactor,
                queryChunkAmnt,
                sampleSwellFactor,
                sampleChunkAmnt,
                queryTranslation
            )


