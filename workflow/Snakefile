import random

import numpy as np

from embedPipeline import embedSets
from embedStatTests import runTests

sys.path.append('./src')

workdir: ".."
configfile: "config.yaml"
dataDir = config["dataDir"]

include: giggleLegacyExperiments.smk


rule synthesizeSequences:
    params:
        seqLenMin = int(1e3),
        seqLenMax = int(25e3),
        seqPerUniverse = int(2e5),
        seed = 31415
    output:
        outFiles = [ f"{dataDir}synthetic/intervals.bed" ],
        fastaOut = f"{dataDir}/synthetic/ref.fa"
    run:
        from src.synthesis import synthesize
        synthesize(output.fastaOut, output.outFiles, *params)


rule embedQualityTests:
    params:
        limit = 1000,  # some of the statistical tests are rather inefficient
                       # and need an input limit to bound runtime
        seed = 31415
    input:
        intervals = f"{dataDir}/giggleBench/query.bed",
        emebds = f"{dataDir}/giggleBench/embeds/straight/query.npy",
    output:
        swtFig = "embedAnalysis/swt.png"
    run:
        random.seed(params.seed)
        np.random.seed(params.seed)
        runTests(input.intervals, input.emebds, params.limit, output.swtFig)


roadmapEpigBedPattern = dataDir + "/roadmap_epigenomics/roadmap_sort/{id}.bed"
roadmapEpigBedNames, = glob_wildcards(roadmapEpigBedPattern)
rule RoadmapEpigenomicsEmbeddings:
    # TODO: roadmap epi workflow should automatically start fiji job
    input:
        refGenome = f"{dataDir}/hg19.fa",
        bedFiles = expand(roadmapEpigBedPattern, id=roadmapEpigBedNames),
    params:
        seqMinLen = config['batchInference']['seqMinLen'],
        seqMaxLen = 1000,
    output:
        embeds = expand(dataDir + "/roadmap_epigenomics/embeds/{id}.npy", id=roadmapEpigBedNames)
    run:
        embedSets(input.refGenome, input.bedFiles, params.seqMinLen, params.seqMaxLen)


