#!/bin/bash

# --- Configuration ---
REMOTE_HOST="fijicluster"
REMOTE_BASE_DIR="projects/giggle-ml"
REMOTE_TARGET="${REMOTE_HOST}:${REMOTE_BASE_DIR}"

# Directories/patterns to exclude from sync
# Using an array for readability and easier modification
declare -a EXCLUDE_PATTERNS=(
	"data/"
	"modelCkpts/"
	"experiments/"
	"jobOutput"
	"logs"
	# temporary files
	"*.tmp.*"
	# system
	".git/"
	".direnv/"
	".venv/"
	".pytest_cache/"
	"*/__pycache__/" # Excludes any directory named __pycache__ recursively
	".snakemake/"
	"src/GiggleML.egg-info/*"
)

sync_remote() {
	local rsync_output
	local rsync_exit_code
	local filter_args=()
	local start_time=$(date +%T)

	for pattern in "${EXCLUDE_PATTERNS[@]}"; do
		filter_args+=("--filter=- ${pattern}")
	done

	rsync_output=$(rsync -pia --delete --prune-empty-dirs "${filter_args[@]}" . "${REMOTE_TARGET}" 2>&1)
	rsync_exit_code=$?

	# Check for rsync errors first
	if [[ $rsync_exit_code -ne 0 ]]; then
		echo "[${start_time}] Rsync Error (Exit Code: $rsync_exit_code):" >&2
		# Print the captured output (which includes stderr) for error diagnosis
		echo "${rsync_output}" >&2
		return 1 # Indicate error
	fi

	# Check if the captured output contains lines indicating actual file transfers/deletions.
	# We look for lines generated by '-i' that signify file operations, not just directory scans.
	# Examples: >f+++++++++ (new file), .f....T.... (timestamp update), *deleting path/to/file
	# The pattern checks for lines starting with typical file change codes or the deletion marker.
	# It explicitly ignores lines just indicating directory processing (like '.d..t......').
	if echo "${rsync_output}" | grep -qE '^[<*>.]f|^\*deleting'; then
		# echo "Synced (${start_time})"
		echo "--- Changes (${start_time}) ---"
		echo "${rsync_output}" | grep -E '^[<*>.]f|^\*deleting'
		echo "--------------------------"
	else
		# No actual file changes were processed by rsync, suppress the "synced" message.
		: # no-op
	fi

	return 0
}

# --- Main Script Logic ---

echo "Performing initial sync..."
sync_remote
echo "Watching for file changes..."

export -f sync_remote
export REMOTE_TARGET
export -a EXCLUDE_PATTERNS

fswatch -ro . | while read -r changed_file; do
	sync_remote
done

# This message is unlikely to be reached unless fswatch errors or is killed externally.
echo "fswatch stopped. Exiting."
